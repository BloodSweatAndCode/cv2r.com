<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>
</head>

<body>

  <% include ../partials/nav.ejs %>

<div class="jumbotron text-center">
  <div class="container info-box shadow doc-container">
    <h3>Help build CV2R!</h3>
    <p>Know some Javascript and node.js? Got some experience hacking NES ROMs with 6502 assembly? Good at generating and modifying pixel art? Want to apply your web dev skills to improve this quickly put together website? If so, there's a good chance you can help! Check out the links below to find the best ways to contribute.</p>
    <ul>
      <li><a href="https://github.com/BloodSweatAndCode/cv2-rando">cv2-rando</a> - This is the core CV2R command line interface written in Javascript with node.js as its engine. While JS runs the CLI, there's mountains of dynamically generated 6502 assembly under the hood that's responsible for the real heart and soul of the randomizer. </li>
      <li><a href="https://github.com/BloodSweatAndCode/cv2r.com">cv2r.com</a> - This is the source code for this website. While able to sling together a website, I'm a backend dev guy, not a web dev. It's a slightly modified default heroku+node.js setup, leveraging express for its server code (which I do know), ejs and bootstrap for its frontend code (which I know much less about). </li>
      <li><a href="https://discord.gg/tuGjwHy">Discord</a> - Join the community of players and developers on the CV2R discord server. Often times new features, bugs, and other ideas are discussed here first before ever making it to Github. The absolute <b>BEST</b> way to get involved is to come join us here!</li>
    </ul>

    <h3>Tools of the Trade</h3>
    <ul>
      <li><a href="http://www.thealmightyguru.com/Games/Hacking/Wiki/index.php/Castlevania_II:_Simon's_Quest">Simon's Quest NES Hacker Wiki</a> - This is basically the bible for anyone attempting to hack CV2. It contains common cheat codes, but most importantly, it contains a growing map of the RAM and ROM memory addresses in the game. This is absolutely critical when attempting to modify the ROM in the way we do to make CV2R. If you plan on helping with cv2-rando, then get really familiar with this document.</li>
      <li><a href="https://www.romhacking.net/utilities/652/">CursEd Game Editor</a> - This program allows you to load up a Simon's Quest ROM and edit levels, enemies, NPCs, text, and graphics. Additionally, it is a fantastic reference for the ROM memory locations of those things in the game. It was used heavily in the making of the itemizer and enemizer for CV2R. It's a must-have tool for the aspiring CV2R developer.</li>
      <li><a href="https://mh-nexus.de/en/hxd/">HxD</a> (or other hex editor) - I use HxD, but any solid hex editor will do. While all ROM code is eventually written via the cv2-rando codebase, all initial discovery and experimentation is more much more efficiently tested via directly editing the CV2 ROM with a hex editor.</li>
      <li><a href="http://www.fceux.com/web/home.html">fceux</a> and <a href="https://www.mesen.ca/">mesen</a> - A good emulator with strong debugging tools is a must for CV2R development. These are 2 of the best NES ones available. fceux is my personal emulator of choice and has been the backbone of all CV2R development. That said, I'm told mesen has much more mature, full-featured debugging tools.</li>
      
    </ul>

    <h3>Need to learn the underlying technology?</h3>
    <ul>
      <li><a href="https://nodejs.org">node.js</a></li>
      <li><a href="https://getbootstrap.com/">bootstrap</a></li>
      <li><a href="https://ejs.co/">ejs</a></li>
      <li><a href="http://skilldrick.github.io/easy6502/">6502 assembly tutorial and online assembler</a></li>
      <li><a href="https://devcenter.heroku.com/categories/nodejs-support">heroku+node.js documentation</a></li>
      <li><a href="https://guides.github.com/activities/hello-world/">introduction to Github</a></li>
    </ul>
  </div>
</div>

</body>
</html>
