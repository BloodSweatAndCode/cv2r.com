<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>
  <script>
    var state = {};

    function getSeed() {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', '/seed', true);
      xhr.onload = function () {
        var dom = $('#seed');
        dom[0].value = this.response;
        dom.removeClass('is-invalid');
        dom.addClass('is-valid');
      };
      xhr.send(null);
    }

    function isValidSeed(seed) {
      return seed && /^[a-zA-Z0-9]{8,}$/.test(seed);
    }

    function setValidity(elem, bool) {
      elem
        .removeClass(bool ? 'is-invalid' : 'is-valid')
        .addClass(bool ? 'is-valid' : 'is-invalid'); 
      return !!bool;
    }

    function togglePatchList() {
      var currentDifficulty = $('#difficulty').val();
      $('#patch-list-tab a').each(function(e) {
        var diffs = ($(this).attr('data-difficulty') || '').split(',');
        if (diffs.includes(currentDifficulty)) {
          $(this).removeClass('patch-disabled list-group-item-light').addClass('patch-enabled list-group-item-danger');
        } else {
          $(this).removeClass('patch-enabled list-group-item-danger').addClass('patch-disabled list-group-item-light');
        }
      });
    }

    function showPalettePreviews() {
      var currentPalette = $('#palette').val();
      $('.palette-preview img').each(function(index) {
        $(this).attr('src', '/img/palette/' + currentPalette + '/' + (index + 1) + '.png');
      });
    }

    $(document).ready(function() {
      getSeed();
      togglePatchList();
      showPalettePreviews();

      $('#palettePreviewModal').on('show.bs.modal', function (event) {
        var image = $(event.relatedTarget);
        var imageSrc = image.attr('src');
        var modal = $(this)
        modal.find('#palettePreviewImage').attr('src', imageSrc);
      });

      $('#palette').change(showPalettePreviews);

      $('#difficulty').change(togglePatchList);

      $('#romFile')[0].addEventListener('change', function() {
        state = {};
        
        var file = this.files[0];
        $('#rom')[0].value = file.name;

        var reader = new FileReader();
        reader.onload = function() {
          state.rom = new Uint8Array(this.result);
          // TODO: add a header check
          setValidity($('#rom'), true);
        }
        reader.readAsArrayBuffer(file);
      }, false);

      $('#seedButton')[0].addEventListener('click', getSeed, false);

      $('#seed')[0].addEventListener('keyup', function(evt) {
        setValidity($('#seed'), isValidSeed(this.value));
      });

      $('#randomizeButton')[0].addEventListener('click', function() {
        var fields = [ 'rom', 'seed', 'difficulty', 'palette' ];
        var values = {};
        var invalid = [];

        // validate all fields and set their values
        fields.forEach(function(field) {
          var $elem = $('#' + field);
          var value = $elem[0].value;
          setValidity($elem, field === 'seed' ? isValidSeed(value) : value) || invalid.push($elem);
          values[field] = value;
        });

        // if any fields are invalid, abort rom generation and scroll to first invalid field
        if (invalid.length) {
          $('html, body').animate({
            scrollTop: invalid[0].offset().top - 50
          }, 500);
          return;
        }
        delete values.rom;

        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/genrom', true);
        xhr.onreadystatechange = function() {
          if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
            var resp = JSON.parse(this.response);
            console.log(resp.spoiler);
            resp.patch.forEach(entry => {
              Object.keys(entry).forEach(offset => {
                state.rom.set(entry[offset], parseInt(offset));
              });
            });
            const blob = new Blob([state.rom]);
            const fileName = 'cv2r-' + resp.version + '-' + values.seed + '.nes';
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', fileName);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
          }
        };
        xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        xhr.send(JSON.stringify(values));
      }, false);
    });
  </script>
</head>

<body>

  <% include ../partials/nav.ejs %>

<div class="jumbotron text-center">
  <div class="container">

    <form class="needs-validation" novalidate>
      <div class="row">
        <div class="col-lg-6">
          <div class="form-group">
            <label for="rom">Upload Castlevania 2 ROM</label>
            <div class="input-group">
              <input type="text" id="rom" class="form-control" readonly="">
              <label class="input-group-btn">
                <span class="btn btn-dark">Browseâ€¦ 
                  <input type="file" id="romFile" style="display: none;">
                </span>
              </label>
              <div class="invalid-feedback">Must upload a valid ROM</div>
            </div>
            <small class="form-text text-muted">This should be "Castlevania II - Simon's Quest (USA).nes" ROM file</small>
          </div>
          <div class="form-group">
            <label for="seed">Randomizer Seed</label>
            <div class="input-group">
              <input type="text" id="seed" class="form-control">
              <label class="input-group-btn">
                <span class="btn btn-dark">Generate Seed 
                  <input type="button" id="seedButton" style="display: none;">
                </span>
              </label>
              <div class="invalid-feedback">Must provide 8+ character seed consisting of uppercase letters, lowercase letters, and/or numbers</div>
            </div>
            <small class="form-text text-muted">Use this seed, generate a new one, or create your own alphanumeric seed. Some of my personal favorites have been "MyCatLovesWhiskey" and "SathdreshMadeMeDoIt".</small>
          </div>
        </div>
        <div class="col-lg-6">
          <div class="form-group">
            <label for="difficulty">Game Difficulty</label>
            <select class="form-control custom-select is-valid" id="difficulty">
              <option value="easy">Easy</option>
              <option value="standard" selected="selected">Standard</option>
              <option value="hard">Hard</option>
            </select>
          </div>
          <div class="row patch-row" class="patch-row">
            <div class="col-4">
              <div class="list-group patch-list" id="patch-list-tab" role="tablist">
                <% patches.forEach(function(patch) { %>
                <a class="list-group-item list-group-item-action" id="list-<%= patch.key %>-list" data-toggle="list" href="#<%= patch.key %>" data-difficulty="<%= patch.difficulty.join(',') %>" role="tab" aria-controls="home"><%= patch.name %></a>
                <% }); %>
              </div>
            </div>
            <div class="col-8 patch-description">
              <div class="tab-content" id="nav-tabContent">
                <% patches.forEach(function(patch) { %>
                <div class="tab-pane fade show" data-difficulty="<%= patch.difficulty %>" id="<%= patch.key %>" role="tabpanel" aria-labelledby="list-<%= patch.key %>-list"><%= patch.description %></div>
                <% }); %>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-lg-6">
          <div class="form-group">
            <label for="palette">Color Palette</label>
            <select class="form-control custom-select is-valid" id="palette">
              <% Object.keys(palettes).forEach(function(key) { %>
                <option value="<%= key %>" <%= key === 'simons-quest' ? 'selected="selected"' : '' %></option><%= palettes[key].name %></option>
              <% }); %>
            </select>
            <small class="form-text text-muted">Choose from a selection of color palettes for the game. "Classic" is the standard Simon's Quest color palette. All other palettes are user submitted patches to change colors throughout the game.</small>
          </div>
        </div>
        <div class="col-lg-6 palette-preview">
          <img src="" data-toggle="modal" data-target="#palettePreviewModal"/>
          <img src="" data-toggle="modal" data-target="#palettePreviewModal"/>
          <img src="" data-toggle="modal" data-target="#palettePreviewModal"/>
          <img src="" data-toggle="modal" data-target="#palettePreviewModal"/>
          <img src="" data-toggle="modal" data-target="#palettePreviewModal"/>
          <img src="" data-toggle="modal" data-target="#palettePreviewModal"/>
          <img src="" data-toggle="modal" data-target="#palettePreviewModal"/>
          <img src="" data-toggle="modal" data-target="#palettePreviewModal"/>
        </div>
      </div>
    </form>
    <hr>
    <button id="randomizeButton" class="btn btn-danger btn-xlarge">RANDOMIZE!</button>
  </div>
</div>

<div class="modal fade" id="palettePreviewModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-body" style="padding:0">
        <img id="palettePreviewImage" src="" style="width:512px;image-rendering:pixelated;"/>
      </div>
    </div>
  </div>
</div>

</body>
</html>
